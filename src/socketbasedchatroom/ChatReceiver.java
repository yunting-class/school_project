/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package socketbasedchatroom;

import java.io.* ;
import java.net.* ;
import javax.swing.JFrame;
/**
 *
 * @author yunti
 */

public class ChatReceiver extends JFrame {
    private int portNo = 4444; // default
    private String ipAddr ;
    private boolean running = true ;
    private BlackBoard board = null ;
    Socket client;
    /**
     * Creates new form NewJFrame
     */
    public ChatReceiver() {
        initComponents();
    }
    class CRThread extends Thread{
    
        CRThread(int pNo, BlackBoard bb){
            try {
                ipAddr = InetAddress.getLocalHost().getHostAddress();
                portNo = pNo ;
                board = bb ;
//                System.out.println("Chat Server, My IP addr="+ipAddr);
            } catch(Exception e) {
                e.printStackTrace();
            }        
        }
        public void setRunning(boolean b) {
            running = b ;
        }
        public void run() {
           try {
               ServerSocket ss = new ServerSocket(portNo) ;
//               System.out.println("---- Server Init ....");
               while (running){
                  client = ss.accept() ;
                  System.out.println("accept a client:"+client);
//                  peerIPTf.setText(client.getInetAddress().toString());
//                  peerPortTf.setText(String.valueOf(client.getLocalPort()));
//                  InetAddress sa =client.getInetAddress();
                  
                  // === 讀取並處理client傳來的訊息
                  new Thread(()->processRequest(client)).start();
               }
            } catch (Exception e) {
                e.printStackTrace(); 
            }
        }
        private void processRequest(Socket client) {
        try {
            
            String msg = new DataInputStream(client.getInputStream()).readUTF() ;
//            System.out.println(">msg="+msg);
            ta.append(msg+"\n");
            if (board!=null) board.show(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Chatroomname = new javax.swing.JLabel();
        MyIP = new javax.swing.JLabel();
        peerIP = new javax.swing.JLabel();
        MyIPTf = new javax.swing.JTextField();
        peerIPTf = new javax.swing.JTextField();
        MyPort = new javax.swing.JLabel();
        peerPort = new javax.swing.JLabel();
        MyPortTf = new javax.swing.JTextField();
        peerPortTf = new javax.swing.JTextField();
        nameTf = new javax.swing.JTextField();
        msgTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Chatroomname.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 24)); // NOI18N
        Chatroomname.setText("點對點聊天室");

        MyIP.setText("MyIP:");

        peerIP.setText("peerIP:");

        MyIPTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyIPTfActionPerformed(evt);
            }
        });

        peerIPTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peerIPTfActionPerformed(evt);
            }
        });

        MyPort.setText("MyPort(Listened):");

        peerPort.setText("peerPort(Listened):");

        MyPortTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyPortTfActionPerformed(evt);
            }
        });

        nameTf.setText("Peter");
        nameTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTfActionPerformed(evt);
            }
        });

        msgTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msgTfActionPerformed(evt);
            }
        });

        ta.setColumns(20);
        ta.setRows(5);
        jScrollPane1.setViewportView(ta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MyIP)
                            .addComponent(peerIP))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MyIPTf)
                            .addComponent(peerIPTf, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MyPort)
                            .addComponent(peerPort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MyPortTf, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(peerPortTf)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(Chatroomname)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msgTf)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(Chatroomname)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MyIP)
                    .addComponent(MyIPTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MyPort)
                    .addComponent(MyPortTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peerIP)
                    .addComponent(peerIPTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peerPort)
                    .addComponent(peerPortTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msgTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MyIPTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyIPTfActionPerformed
        // TODO add your handling code here:
//        MyIPTf.setText(ipAddr);
    }//GEN-LAST:event_MyIPTfActionPerformed

    private void MyPortTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyPortTfActionPerformed
         // TODO add your handling code here:
//         MyPortTf.setText(String.valueOf(portNo));
    }//GEN-LAST:event_MyPortTfActionPerformed

    private void msgTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msgTfActionPerformed
        // TODO add your handling code here:
        ta.append(nameTf.getText()+":"+msgTf.getText()+"\n");
        Thread t = new CRThread(4444,null);
        t.start();
        MyPortTf.setText(String.valueOf(portNo));
        MyIPTf.setText(ipAddr);
//        peerIPTf.setText(client.getInetAddress().toString());
//        peerPortTf.setText(String.valueOf(client.getLocalPort()));
        msgTf.setText("");

    }//GEN-LAST:event_msgTfActionPerformed

    private void nameTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTfActionPerformed

    private void peerIPTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peerIPTfActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_peerIPTfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatReceiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatReceiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatReceiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatReceiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatReceiver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Chatroomname;
    private javax.swing.JLabel MyIP;
    private javax.swing.JTextField MyIPTf;
    private javax.swing.JLabel MyPort;
    private javax.swing.JTextField MyPortTf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField msgTf;
    private javax.swing.JTextField nameTf;
    private javax.swing.JLabel peerIP;
    private javax.swing.JTextField peerIPTf;
    private javax.swing.JLabel peerPort;
    private javax.swing.JTextField peerPortTf;
    private javax.swing.JTextArea ta;
    // End of variables declaration//GEN-END:variables
}
